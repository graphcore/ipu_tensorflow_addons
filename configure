#!/bin/bash

set -e # Stop on error

DEFAULT_VENV_PATH="./venv"
USER_BAZELRC=true

DIR=$(realpath $(dirname $0))
cd $DIR

print_usage_and_exit() {
  cat <<EOM
Usage: $0 TENSORFLOW-WHEEL-PATH [--help|-h] [--venv-path VENV-PATH] [--no-user-bazelrc] [--environment-variables VARIABLES] [--disk-cache|-c CACHE-FOLDER]

  TENSORFLOW-WHEEL-PATH
      The path to the IPU TensorFlow .whl file you want to build IPU TensorFlow Addons for.
  -h, --help
      Print this help message.
  --venv-path VENV-PATH
      Choose the location of the Python virtual environment.
      If a virtual environment already exists at the specified path, it will be reused.
      The default is $DEFAULT_VENV_PATH.
  --no-user-bazelrc
      Do not touch .bazelrc.user
      Important: This means the environment will not be frozen.
  --environment-variables VARIABLES
      Comma separated list of environment variables to forward to Bazel.
  -c, --disk-cache CACHE-FOLDER
      Enable bazel's disk cache.
EOM
  exit 1
}

POSITIONAL_ARGS=""

# Parse non-positional args
while [[ $# -gt 0 ]]; do
  case "$1" in
  --venv-path)
    shift
    VENV_PATH=$1
    if [[ ${VENV_PATH:0:1} == "-" ]]; then
      echo "ERROR: invalid ---venv-path argument: path cannot start with a '-': ${VENV_PATH}"
      exit 1
    fi
    shift
    ;;
  --no-user-bazelrc)
    USER_BAZELRC=false
    shift
    ;;
  --environment-variables)
    shift
    ENV_VARS=$1
    if [[ ${ENV_VARS:0:1} == "-" ]]; then
      echo "ERROR: invalid --environment-variables argument: variables cannot start with a '-': ${ENV_VARS}"
      exit 1
    fi
    shift
    ;;
  -c | --disk-cache)
    shift
    BAZEL_CACHE_DIR=$1
    if [[ ${BAZEL_CACHE_DIR:0:1} == "-" ]]; then
      echo "ERROR: invalid --disk-cache argument: folder cannot start with a '-': ${BAZEL_CACHE_DIR}"
      exit 1
    fi
    shift
    ;;
  -h | --help)
    print_usage_and_exit
    shift
    ;;
  *)
    POSITIONAL_ARGS="$POSITIONAL_ARGS $1"
    shift
    ;;
  esac
done

# Parse positional args
eval set -- "$POSITIONAL_ARGS"

if [[ "$#" -ne 1 ]]
	then
	  echo "ERROR: incorrect or missing parameters"
    print_usage_and_exit
fi

TENSORFLOW_WHEEL_PATH=$1

if [ ! -z "${TF_POPLAR_BASE}" ] && [ ! -z "${TF_POPLAR_SANDBOX}" ]; then
  echo "ERROR: Both TF_POPLAR_BASE and TF_POPLAR_SANDBOX are set, please unset one"
  exit 1
fi
if command -v popc &> /dev/null; then
  # If Poplar is already in you PATH, that would take precedence over TF_POPLAR_BASE or TF_POPLAR_SANDBOX.
  if [ -n "${TF_POPLAR_BASE}" ]; then
    echo "ERROR: TF_POPLAR_BASE is set but Poplar is already in your PATH"
    exit 1
  elif [ -n "${TF_POPLAR_SANDBOX}" ]; then
    echo "ERROR: TF_POPLAR_SANDBOX is set but Poplar is already in your PATH"
    exit 1
  fi
elif [ ! -z "${TF_POPLAR_BASE}" ]; then
  if [ -f "${TF_POPLAR_BASE}/bin/popc" ]; then
    echo "OK: TF_POPLAR_BASE is set to $TF_POPLAR_BASE"
    # Add Poplar to PATH.
    source ${TF_POPLAR_BASE}/enable.sh
  else
    echo "ERROR: TF_POPLAR_BASE is set to an invalid path: ${TF_POPLAR_BASE}/bin/popc doesn't exist"
    exit 1
  fi
elif [ ! -z "${TF_POPLAR_SANDBOX}" ]; then
  if [ -f "${TF_POPLAR_SANDBOX}/poplar/bin/popc" ]; then
    echo "OK: TF_POPLAR_SANDBOX is set to $TF_POPLAR_SANDBOX"
    # Add Poplar to PATH.
    source ${TF_POPLAR_SANDBOX}/../activate.sh
  else
    echo "ERROR: TF_POPLAR_SANDBOX is set to an invalid path: ${TF_POPLAR_SANDBOX}/poplar/bin/popc doesn't exist"
    exit 1
  fi
else
  echo "ERROR: You need to add Poplar to your PATH, or set either TF_POPLAR_BASE or TF_POPLAR_SANDBOX"
  exit 1
fi

# On macOS, use the Python from Homebrew if installed.
if [[ $OSTYPE == darwin* ]] && [ -x "$(command -v brew)" ]; then
  PYTHON_BIN_PATH=$(brew list ${python@3} | grep "python$" | head -n 1)
fi

if [ -z ${PYTHON_BIN_PATH} ]; then
  PYTHON_BIN_PATH=$(which python3)
fi

if [ -z ${PYTHON_BIN_PATH} ]; then
  echo "Couldn't find Python interpreter"
  exit 1
fi

echo "Using ${PYTHON_BIN_PATH}"

VE="${VENV_PATH:-$DEFAULT_VENV_PATH}"

CONFIG_ARGS=("--venv-path" "${VE}" "--tf-whl-path" "$(realpath $TENSORFLOW_WHEEL_PATH)")
if [ -n "${ENV_VARS+set}" ]; then
  CONFIG_ARGS+=("--env","${ENV_VARS}")
fi
if [ -n "${BAZEL_CACHE_DIR+set}" ]; then
  CONFIG_ARGS+=("--disk-cache" "${BAZEL_CACHE_DIR}")
fi

python3 ${DIR}/configure.py ${CONFIG_ARGS[@]}
